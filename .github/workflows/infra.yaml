name: Infra Workflow

#Events
on:
  # push:
  #   branches: [ infra ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  
  PROJECT_NAME: bgd-dpl
  PROJECT_ENV: dev                 

#Jobs
jobs:
  create_network_resources:
    name: Create AWS Infrastructure with TF
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: infra  # the branch that contains the Terraform code

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #======================================#
      # Install Terraform and its dependencies
      #======================================#
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          

      #================================#
      # Dynamically create tfvars file
      #================================#
      # - name: Generate tfvars file
      #   id: tfvars
      #   run: |
      #     touch dev.tfvars
      #     echo "aws_region = \"${{ env.AWS_REGION }}\"" >> dev.tfvars
      #     echo "project_name = \"${{ env.PROJECT_NAME }}\"" >> dev.tfvars
      #     echo "environment = \"${{ env.PROJECT_ENV }}\"" >> dev.tfvars

      #     cat dev.tfvars
      #   working-directory: infra/network-resources/

      #=============================#
      # Terraform Init
      #=============================#
      - name: Terraform Init
        id: init
        run: terraform init   
        working-directory: infra/network-resources/

      #=============================#
      # Terraform Validate.
      #=============================#
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infra/network-resources/

      #===================================================#
      # Terraform Plan AWS VPC, & Other Resources Creation
      #===================================================#
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: infra/network-resources/
        continue-on-error: true

      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/network-resources/
        run: terraform apply -auto-approve

  create_ecs_resource:
    name: Create ECS Cluster & Task Definition

    defaults:
      run:
        shell: bash

    needs: create_network_resources
    runs-on: ubuntu-latest

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: infra/  # the branch that contains the Terraform code

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #======================================#
      # Install Terraform and its dependencies
      #======================================#
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          

      #================================#
      # Dynamically create tfvars file..
      #================================#
      # - name: Generate tfvars file
      #   id: tfvars
      #   run: |
      #     touch dev.auto.tfvars
      #     echo "aws_region = \"${{ env.AWS_REGION }}\"" >> dev.auto.tfvars
      #     echo "project_name = \"${{ env.PROJECT_NAME }}\"" >> dev.auto.tfvars
      #     echo "environment = \"${{ env.PROJECT_ENV }}\"" >> dev.auto.tfvars

      #     cat dev.auto.tfvars
      #   working-directory: infra/ecs-resources/

      #=============================#
      # Terraform Init
      #=============================#
      - name: Terraform Init
        id: init
        run: terraform init   
        working-directory: infra/ecs-resources/

      #=============================#
      # Terraform Validate.
      #=============================#
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infra/ecs-resources/

      #===================================================#
      # Terraform Plan AWS VPC, & Other Resources Creation
      #===================================================#
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: infra/ecs-resources/
        continue-on-error: true

      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/ecs-resources/
        run: terraform apply -auto-approve

  create_codedeploy_resource:
    name: Create CodeDeploy Resources
      
    defaults:
      run:
        shell: bash

    needs: create_ecs_resource
    runs-on: ubuntu-latest

    steps:
      #====================================#
      # Checkout repository into runner
      #====================================#
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: infra/  # the branch that contains the Terraform code

      #====================================#
      # Configure AWS credentials
      #====================================#
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      #======================================#
      # Install Terraform and its dependencies
      #======================================#
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_version: 1.8.5
          

      #================================#
      # Dynamically create tfvars file
      #================================#
      # - name: Generate tfvars file
      #   id: tfvars
      #   run: |
      #     touch dev.auto.tfvars
      #     echo "aws_region = \"${{ env.AWS_REGION }}\"" >> dev.auto.tfvars
      #     echo "project_name = \"${{ env.PROJECT_NAME }}\"" >> dev.auto.tfvars
      #     echo "environment = \"${{ env.PROJECT_ENV }}\"" >> dev.auto.tfvars

      #     cat dev.auto.tfvars
      #   working-directory: infra/codedeploy-resources/

      #=============================#
      # Terraform Init
      #=============================#
      - name: Terraform Init
        id: init
        run: terraform init   
        working-directory: infra/codedeploy-resources/

      #=============================#
      # Terraform Validate.
      #=============================#
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: infra/codedeploy-resources/

      #===================================================#
      # Terraform Plan AWS VPC, & Other Resources Creation
      #===================================================#
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: infra/codedeploy-resources/
        continue-on-error: true

      #===================================================#
      # Terraform Apply Infrastructure Creation
      #===================================================#
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: infra/codedeploy-resources/
        run: terraform apply -auto-approve